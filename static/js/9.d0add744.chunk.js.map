{"version":3,"sources":["store/Actions/errorHandlerActions.js","axios/axios.js","store/Actions/repositoryActions.js","components/OwnerComponents/OwnersAccounts/OwnersAccounts.js","containers/Owner/OwnerDetails/OwnerDetails.js"],"names":["handleHTTPError","error","props","response","status","type","actionTypes","execute404Handler","execute500Handler","executeOtherErrorHandler","closeErrorModal","instance","axios","create","baseURL","headers","headerType","getData","url","dispatch","get","then","data","catch","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","OwnersAccounts","accounts","map","account","key","id","accountType","format","dateCreated","md","responsive","striped","OwnerDetails","useDispatch","useEffect","match","params","repositoryActions","owner","useSelector","state","repository","name","dateOfBirth","length","className","renderTypeOfUserConditionally"],"mappings":"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","file":"static/js/9.d0add744.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nconst execute404Handler = props => {\r\n    return {\r\n        type: actionTypes.HTTP_404_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst execute500Handler = props => {\r\n    return {\r\n        type: actionTypes.HTTP_500_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst executeOtherErrorHandler = error => {\r\n    return {\r\n        type: actionTypes.HTTP_OTHER_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const handleHTTPError = (error, props) => {\r\n    if (error.response.status === 404) {\r\n        return execute404Handler(props);\r\n    }\r\n    else if (error.response.status === 500) {\r\n        return execute500Handler(props);\r\n    }\r\n    else {\r\n        return executeOtherErrorHandler(error);\r\n    }\r\n}\r\n\r\nexport const closeErrorModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://pacific-meadow-89341.herokuapp.com',\r\n    headers: {\r\n        headerType: 'example header type'\r\n    }\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios/axios';\r\nimport * as errorHandlerActions from './errorHandlerActions';\r\n\r\nconst getDataSuccess = data => {\r\n    return {\r\n        type: actionTypes.GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const getData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.get(url)\r\n        .then(response => {\r\n            dispatch(getDataSuccess(response.data));\r\n        })\r\n        .catch (error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst postDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.POST_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\nexport const postData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.post(url, obj)\r\n        .then(response => {\r\n            dispatch(postDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\nconst putDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.PUT_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\nexport const putData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.put(url, obj)\r\n        .then(response => {\r\n            dispatch(putDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\nconst deleteDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.DELETE_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\nexport const deleteData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.delete(url)\r\n        .then(response => {\r\n            dispatch(deleteDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nexport const closeSuccessModal = (props, url) => {\r\n    return {\r\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\r\n        props: props,\r\n        url: url\r\n    }\r\n}","import React from 'react';\r\nimport { Row, Col, Table } from 'react-bootstrap';\r\nimport Moment from 'react-moment';\r\n\r\nconst OwnersAccounts = (props) => {\r\n    let accounts = null;\r\n    if (props.accounts) {\r\n        accounts = props.accounts.map(account => {\r\n            return (\r\n                <tr key={account.id}>\r\n                    <td>{account.accountType}</td>\r\n                    <td><Moment format=\"DD/MM/YYYY\">{account.dateCreated}</Moment></td>\r\n                </tr>\r\n            );\r\n        })\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <Table responsive striped>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Account type</th>\r\n                            <th>Date created</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {accounts}\r\n                    </tbody>\r\n                </Table>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\nexport default OwnersAccounts;","import React, { Fragment, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Well, Row, Col } from 'react-bootstrap';\r\nimport Moment from 'react-moment';\r\nimport OwnersAccounts from '../../../components/OwnerComponents/OwnersAccounts/OwnersAccounts';\r\nimport * as repositoryActions from '../../../store/Actions/repositoryActions';\r\n\r\nconst OwnerDetails = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let id = props.match.params.id;\r\n        let url = '/api/owner/' + id + '/account';\r\n        dispatch(repositoryActions.getData(url, {...props}));\r\n    }, [props, dispatch])\r\n\r\n    const owner = useSelector(state => state.repository.data);\r\n\r\n    const renderTypeOfUserConditionally = (owner) => {\r\n        let typeOfUser = null;\r\n        if (owner.accounts && owner.accounts.length <= 2) {\r\n            typeOfUser = (\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Type of user:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <span className={'text-success'}>Beginner user.</span>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n        else {\r\n            typeOfUser = (\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Type of user:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <span className={'text-info'}>Advanced user.</span>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n        }\r\n        return typeOfUser;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Well>\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Owner name:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        {owner.name}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <strong>Date of birth:</strong>\r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <Moment format=\"DD/MM/YYYY\">{owner.dateOfBirth}</Moment>\r\n                    </Col>\r\n                </Row>\r\n                {renderTypeOfUserConditionally(owner)}\r\n            </Well>\r\n            <OwnersAccounts accounts={owner.accounts} />\r\n        </Fragment>\r\n    )\r\n}\r\nexport default OwnerDetails;"],"sourceRoot":""}